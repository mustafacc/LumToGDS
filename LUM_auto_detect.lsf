function get_objects_info(){
    #selects all objects, saves all their info to a struct
    clear;
    groupscope("::model");
    
    #Get the amount of items there are and create entries for each one
    selectall;
    obj_count = getnumber; #function to call all selected objects
    unselectall;
    objects = {
        "name":cell(obj_count),
        "material":cell(obj_count),
        "zmin":cell(obj_count),
        "zmax":cell(obj_count)    
        };
    
    while_bool=1;
    errMsg = "";
    for(i = 1; i <= obj_count ; i=i+1) {
        selectall;
        gdstemp_name = get("name",1); #the additional argument is to choose the first item when multiple are selected       
        select(gdstemp_name);
        if(gdstemp_name != "gdstemp"){
            addtogroup("gdstemp");
            #do stuff
            try{
                test=get("material"); #check the obj is a geometry
                }catch(errMsg); #Lumerical support: you can use get("type") or getnamed("NAME","type"). But this returns specific object types, not general types
             if (errMsg == ""){
                objects.name{i} = get("name");
                objects.material{i} = get("material"); 
                objects.zmin{i} = get("z min"); 
                objects.zmax{i} = get("z max");
                }
            else{
                objects.name{i} = "none";
                objects.material{i} = "none";
                objects.zmin{i} = -1; #-1m, kind of risky to use in place of a none type. But lumerical doesn't have none types..
                objects.zmax{i} = -1;
                }    
            }
        #reset variables. this is needed to assign 0 to unexpected values from line29
        test="0";
        errMsg = "";
    }
    
    #Return objects back to original
    groupscope("gdstemp");
    selectall;
    addtogroup("::model");
    groupscope("::model");
    select("gdstemp");
    delete;
    
    #Remove nonegeometry objects
    count = 0;
    array_size = length(objects.name);    
    for (i=1;i<=array_size;i=i+1){
        try {
            if (objects.name{i} != "none"){ #get the objects that are geometries
                count=count+1; #get a count of how many objects there are            
            }
        }
    }
    #Use the count to create the properly sized array
    formatted_objects = {
        "name":cell(count),
        "material":cell(count),
        "zmin":cell(count),
        "zmax":cell(count)    
        };
    
    #Copy objects that are geometries over to the new struct
    j=1;
    for (i=1;i<=array_size;i=i+1){
        try {
            if (objects.name{i} != "none"){ #get the objects that are geometries
                formatted_objects.name{j} = objects.name{i};
                formatted_objects.material{j} = objects.material{i};
                formatted_objects.zmin{j} = objects.zmin{i};
                formatted_objects.zmax{j} = objects.zmax{i};     
                j = j+1;                 
            }
        }
    }
    
    #Return results
    return formatted_objects;
}

function get_duplicate_layers(objects){
    #run first time to count how large of an array is needed
    array_size = length(objects.name); 
    layer_dup = [-1]; #tracks the duplicate layer's index
    layer_ori = [-1]; #tracks the original layer index
    
    if(array_size==0){
        print("No objects detected.");
        return 0;
    }
    
    else if(array_size==1){
        print("Detected 1 object only.");
    }

    else{ #if more than 1 item, check in 2s if they are the same material
        i=1;
        j=2;
        for(0;i<array_size;0){
            for(0;j<=array_size;0){
                if (objects.material{i} == objects.material{j}){ #confirm materials match
                    if ((objects.zmin{i} == objects.zmin{j}) & (objects.zmax{i} == objects.zmax{j})){
                    layer_dup = [layer_dup,j];
                    layer_ori = [layer_ori,i];
                    }
                }
                j=j+1;
            }
            i=i+2;
        }
    }
    duplicates = matrix(length(layer_dup),2);
    duplicates(:,1) = layer_ori;
    duplicates(:,2) = layer_dup;
      
    return duplicates;
}

function format_layerdata(objects,layer_dup){
    array_size = length(objects.name);    
    count = array_size - length(layer_dup)+1;
    layerdata = {
        "material":cell(count),
        "zmin":cell(count),
        "zmax":cell(count)
    };
    
    k=1;
    for(i=1;i<=array_size;i=i+1){
        if (!any(i==layer_dup)){
            ?k;
            layerdata.material{k} = objects.material{i};
            layerdata.zmin{k} = objects.zmin{i};
            layerdata.zmax{k} = objects.zmax{i};
            k=k+1;
        }
    }
    
    return layerdata;
}

#a=get_objects_info();
#metadata = create_export_metadata(get_objects_info());
#clearfunctions;

#?metadata.material;
#?metadata.material{1};
#?metadata.material{2};
#?metadata.material{3};
#?metadata.material{4};
#?metadata.material{5};
